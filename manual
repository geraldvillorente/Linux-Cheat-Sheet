#!/usr/bin/env bash
#
# manual
#
# Copyright 2013 Gerald Villorente <gerald@ninjas-corner.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.
#
# My manual in Unix administration.
#

bold=`tput bold`
normal=`tput sgr0`

###################################
# Display permission table.
###################################
function permission() {
 echo "
   CHMOD is used to change permissions of a file.

          ${bold}PERMISSION      COMMAND${normal}

           U   G   W
          ${bold}rwx rwx rwx     chmod 777 filename
          rwx rwx r-x     chmod 775 filename
          rwx r-x r-x     chmod 755 filename
          rw- rw- r--     chmod 664 filename
          rw- r-- r--     chmod 644 filename

          U = User
          G = Group
          W = World

          r = Readable
          w = writable
          x = executable
          - = no permission${normal}

  Here is another way of looking at it:

  Permissions:

  ${bold}400     read by owner
  040     read by group
  004     read by anybody (other)
  200     write by owner
  020     write by group
  002     write by anybody
  100     execute by owner
  010     execute by group
  001     execute by anybody${normal}
 "
}
###################################
# Compressing using Tar.
###################################
function tar() {
  echo "
    Creating a tar file
      ${bold}tar -cvwf file.tar myfile.txt
      tar -cvwf home.tar directory_to_compress${normal}

    Creating a tar.gz file
      ${bold}tar -zcvf archive_name.tar.gz directory_or_file_to_compress${normal}

    Creating tar.bz2 file
      ${bold}tar -jcvf archive_name.tar.bz2 directory_or_file_to_compress${normal}

    Creating a tarred file that is compressed
      ${bold}tar -cjvf test.tbz directory_or_file_to_compress${normal}

    Extracting tar.bz2 file in different directory
      ${bold}tar -jxvf archive_name.tar.bz2 -C /path/to/any/directory/${normal}

    Extracting the files from a tar file
      ${bold}tar -xvwf myfile.tar
      tar -xvwf myfile.tar -C /path/to/any/directory/${normal}

    Extracting the files from a tar.gz file
      ${bold}tar -xvwzf myfile.tar.gz
      tar -xvwzf myfile.tar.gz -C /path/to/any/directory/
      tar -zxvf archive_name.tar.gz -C /path/to/any/directory/${normal}

    Listing the tar contents without extracting any of the files
      ${bold}tar -tvf myfile.tar${normal}
  "
}
#################################
# Zip manual.
#################################
function zip() {
  echo "
    To compress a directory with zip do the following
      ${bold}zip -r archive_name.zip directory_or_file_to_compress${normal}

    Here’s how you extract a zip archive:
      ${bold}unzip archive_name.zip${normal}
  "
}
#################################
# MySQL manual.
#################################
function mysql() {
  echo "
    List all database
      ${bold}mysql -u DBuser -h DBhostname -pDBpassword -Bse ‘show databases’${normal}
        or
      ${bold}ssh user@host “mysql -uDBuser -pDBpassword -Bse ‘show databases’”${normal}

    Create database
      ${bold}ssh user@host “mysql -uDBusername -pDBpassword -Bse ‘create DBname’”${normal}

      or

      ${bold}mysqladmin -u root -pmypassword create testdb${normal}

    Drop database
      ${bold}ssh user@host “mysql -uDBusername -pDBpassword -Bse ‘drop database DBname’”${normal}

      or

      ${bold}mysqladmin -u root -pmypassword drop testdb${normal}

    Create database
      ${bold}ssh user@host “mysql -uDBusername -pDBpassword -Bse ‘create database DBname’”${normal}

    Use database
      ${bold}ssh user@host “mysql -uDBusername -pDBpassword -Bse ‘use DBname’”${normal}

    Import database
      ${bold}ssh user@host “mysql -uDBusername -pDBpassword -Bse ‘use DBname; \. /path/to/source/file.sql’”${normal}

    Backup database
      ${bold}ssh -C user@hostname “mysqldump –opt -uDBuser -pDBpassword –compress DBname | gzip -9 -c” > /path/to/target/output.sql.gz${normal}

    Change the MySQL root user password
      ${bold}mysqladmin -u root -pmypassword password 'newpassword'${normal}

    Check whether MySQL Server is up and running
      ${bold}mysqladmin -u root -pmypassword ping${normal}

    Find out what version of MySQL I am running
      ${bold}mysqladmin -u root -pmypassword version${normal}

    Check current status of MySQL server
      ${bold}mysqladmin -u root -pmypassword status${normal}

      The status command displays the following information:

      * ${bold}Uptime${normal}: Uptime of the mysql server in seconds
      * ${bold}Threads${normal}: Total number of clients connected to the server.
      * ${bold}Questions${normal}: Total number of queries the server has executed since the startup.
      * ${bold}Slow queries${normal}: Total number of queries whose execution time waas more than long_query_time variable’s value.
      * ${bold}Opens${normal}: Total number of tables opened by the server.
      * ${bold}Flush tables${normal}: How many times the tables were flushed.
      * ${bold}Open tables${normal}: Total number of open tables in the database.

    View all the MySQL Server status variable and it’s current value
      ${bold}mysqladmin -u root -pmypassword extended-status${normal}

    Display all MySQL server system variables and the values
      ${bold}mysqladmin  -u root -pmypassword variables${normal}

    Display all the running process/queries in the mysql database
      ${bold}mysqladmin -u root -pmypassword processlist${normal}

      or use the command below to effectively debug any performance issue and identify the query that is causing problems, by running the command automatically every 1 second

      ${bold}mysqladmin -u root -pmypassword -i 1 processlist${normal}

    Reload the privilege or the grants tables
      ${bold}mysqladmin -u root -pmypassword reload;${normal}

    Refresh the privilege or the grants tables
    Refresh command will flush all the tables and close/open log files
      ${bold}mysqladmin -u root -pmypassword refresh${normal}

    Safe method to shutdown the MySQL server
      ${bold}mysqladmin -u root -pmypassword shutdown${normal}

      or

      ${bold}sudo service mysql stop${normal}

      or

      ${bold}sudo /etc/init.d/mysql stop${normal}

    List of all mysqladmin flush commands
      ${bold}mysqladmin -u root -ptmppassword flush-hosts
      mysqladmin -u root -ptmppassword flush-logs
      mysqladmin -u root -ptmppassword flush-privileges
      mysqladmin -u root -ptmppassword flush-status
      mysqladmin -u root -ptmppassword flush-tables
      mysqladmin -u root -ptmppassword flush-threads${normal}

      * flush-hosts: Flush all information in the host cache.
      * flush-privileges: Reload the grant tables (same as reload).
      * flush-status: Clear status variables.
      * flush-threads: Flush the thread cache.

    Kill a hanging MySQL Client Process
      ${bold}mysqladmin -u root -pmypassword processlist${normal}

      Then, use the kill command and pass the process_id as shown below
      To kill multiple process you can pass comma separated process id’s

      ${bold}mysqladmin -u root -pmypassword kill 20${normal}

      or

      ${bold}mysqladmin -u root -pmypassword kill 20,24,26,30${normal}

    Start and stop MySQL replication on a slave server
      ${bold}mysqladmin -u root -pmypassword stop-slave${normal}
      ${bold}mysqladmin -u root -pmypassword start-slave${normal}

    Combine multiple mysqladmin commands together
      ${bold}mysqladmin -u root -pmypassword process status version${normal}

      Or use the short form as shown below
      
      ${bold}mysqladmin -u root -ptmppassword pro stat ver${normal}
  "
}
##################################
# Find and delete.
##################################
function findremove() {
  echo "
    Example:

    For SVN:
      ${bold}sudo find . -type d -name .svn | xargs rm -rf${normal}

    For Git:
      ${bold}sudo find . -type d -name .git | xargs rm -rf${normal}
  "
}
##################################
# Managing Services.
##################################
function services() {
  echo "
    Start Apache service
      ${bold}sudo etc/init.d/apache2 start
      sudo service apache2 start
      sudo service httpd start${normal}

    Stopping Apache service
      ${bold}sudo etc/init.d/apache2 stop
      sudo service apache2 stop
      sudo service httpd stop${normal}

    Reloading Apache configurations
      ${bold}sudo etc/init.d/apache2 reload
      sudo service apache2 reload
      sudo service httpd reload${normal}

    Restarting Apache service
      ${bold}sudo etc/init.d/apache2 restart
      sudo service apache2 restart
      sudo service httpd restart${normal}

    Starting MySQL service
      ${bold}sudo /etc/init.d/mysql start
      sudo service mysql start
      sudo service mysqld start${normal}

    Stopping MySQL service
      ${bold}sudo /etc/init.d/mysql stop
      sudo service mysql stop
      sudo service mysqld stop${normal}

    Reloading MySQL configurations
      ${bold}sudo /etc/init.d/mysql reload
      sudo service mysql reload
      sudo service mysqld reload${normal}

    Restarting MySQL service
      ${bold}sudo /etc/init.d/mysql restart
      sudo service mysql restart
      sudo service mysqld restart${normal}

    Starting networking service
      ${bold}sudo /etc/init.d/networking start
      sudo service networking start${normal}

    Stopping networking service
      ${bold}sudo /etc/init.d/networking stop
      sudo service networking stop${normal}

    Reloading networking configurations
      ${bold}sudo /etc/init.d/networking reload
      sudo service networking reload${normal}
  "
}
##################################
# Sed.
##################################
function sed() {
  echo "
    Replacing a string
      ${bold}sed 's/old/new/g' file${normal}

    Replacing a string and make it permanent
      ${bold}sed -i 's/old/new/g' file
      sed -e 's/old/new/g' > file$
      sed -i 's|'$fileWithPath'|HAHA|g' file{normal}

    For more files or for a list of them
      ${bold}grep -lre 'pattern' . | xargs -d'\n' sed -i 's/old/replace/g'${normal}
  "
}
##################################
# Resources.
##################################
function resources() {
  echo "
    http://www.catonmat.net/blog/bash-one-liners-explained-part-two/
  "
}
##################################
# Creating folder/s.
##################################
function directory() {
  echo "
    Create multiple directories at once in a single location with nested directories
      ${bold}mkdir -p Dev/{git,www/{drupal,apc},svn}/sub${normal}

      Expected Output:

      Dev
       -- git
           -- sub
       -- www
           -- drupal
           -- apc
       -- svn
           -- sub

    Create nested folders at once
      ${bold}mkdir -p Dev/sub1/sub2/sub3/sub4${normal}

      Expected Output:

      Dev
       -- sub1
           -- sub2
               -- sub3
                   -- sub4
  "
}
##################################
# Using watch for monitoring
##################################
function watch() {
  echo "
    Watch mysql process. Where -n 1 specifies that mysqladmin executes every second.
      ${bold}watch -n 1 mysqladmin processlist${normal}

    Watch mysql process using specific user account.
      ${bold}watch -n 1 mysqladmin --user=<user> --password=<password> processlist${normal}

  "
}
##################################
# SSH
##################################
function ssh() {
  echo "
    Transfer Client Key to Host
      ${bold}ssh-copy-id <username>@<host>
      ssh-copy-id \"<username>@<host> -p <port_nr>\"${normal}
      
    Key Encryption Level
    Note: The default is a 2048 bit key. You can increase this to 4096 
    bits with the -b flag (Increasing the bits makes it harder to crack 
    the key by brute force methods).
      ${bold}ssh-keygen -t rsa -b 4096${normal}
  "
}

##################################
if [ "$1" == "--permission" ]; then
  permission
elif [ "$1" == "--tar" ]; then
  tar
elif [ "$1" == "--zip" ]; then
  zip
elif [ "$1" == "--mysql" ]; then
  mysql
elif [ "$1" == "--findremove" ]; then
  findremove
elif [ "$1" == "--services" ]; then
  services
elif [ "$1" == "--sed" ]; then
  sed
elif [ "$1" == "--resources" ]; then
  resources
elif [ "$1" == "--directory" ]; then
  directory
elif [ "$1" == "--watch" ]; then
  watch
elif [ -z "$1" ]; then
  echo "
    Parameters are:
      ${bold}--permission${normal}      Display permission table
      ${bold}--tar${normal}             Show examples of tar command
      ${bold}--zip${normal}             Show examples of zip command
      ${bold}--mysql${normal}           Show examples of mysql command
      ${bold}--findremove${normal}      Show examples of find and rm command
      ${bold}--services${normal}        Show examples of managing daemon
      ${bold}--sed${normal}             Show examples of sed command
      ${bold}--resources${normal}       Show resources from internet
      ${bold}--directory${normal}       Show examples of using mkdir command
      ${bold}--watch${normal}           Show examples of using watch command
  "
fi

exit
